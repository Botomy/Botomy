"use strict";(self.webpackChunkbotomy_wiki=self.webpackChunkbotomy_wiki||[]).push([[8844],{7176:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=a(4848),s=a(8453);const r={sidebar_position:3},i="Players",o={id:"level-data/players/players",title:"Players",description:"The players array contains information about other players in the game. This is a subset of the information available for your own player:",source:"@site/docs/level-data/players/players.md",sourceDirName:"level-data/players",slug:"/level-data/players/",permalink:"/Botomy/docs/level-data/players/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Own Player",permalink:"/Botomy/docs/level-data/own-player/"},next:{title:"Enemies",permalink:"/Botomy/docs/level-data/enemies/"}},l={},c=[];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"players",children:"Players"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"players"})," array contains information about other players in the game. This is a subset of the information available for your own player:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "id": "Player2",              // Unique player identifier\n    "type": "player",             // Entity type\n    "display_name": "Bot2",       // Player display name\n    "position": {                 // Current position\n      "x": 300,\n      "y": 400\n    },\n    "health": 100,               // Current health points\n    "base_speed": 415,           // Base movement speed\n    "attack_damage": 15,         // Base attack damage\n    "shield_raised": false,      // Shield currently active\n    "direction": "right",        // Facing direction left/right\n    "is_attacking": false,       // Attack animation active\n    "is_zapped": false,         // Affected by speed zapper\n    "is_boosted": false,        // Speed boost active\n    "is_dashing": false,        // Dash movement active\n    "is_frozen": false,         // Frozen status\n    "is_pushed": false,         // Being pushed\n    "unleashing_shockwave": false, // Special attack active\n    "special_equipped": "",  // Current special attack (bomb, shockwave, or freeze)\n    "speech": "Hello!",         // Current speech bubble\n    "score": 1000,             // Current score\n    "levelling": {\n      "level": 1              // Player\'s current level\n    },\n    "is_overclocking": false,  // Overclock status\n    "has_health_regen": false,  // Health regeneration active\n    "points": 800             // Base XP awarded when killed (before level difference modifiers)\n  }\n]\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Use this information to track other players' status and plan your strategy accordingly"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);