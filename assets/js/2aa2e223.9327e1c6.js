"use strict";(self.webpackChunkbotomy_wiki=self.webpackChunkbotomy_wiki||[]).push([[1561],{3944:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/run-f91648691048e4a59e1d9a2dfd389f9f.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},9964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=t(4848),o=t(8453);const s={sidebar_position:2},r="Quickstart Tutorial",l={id:"getting-started/quickstart-tutorial",title:"Quickstart Tutorial",description:"How It Works",source:"@site/docs/getting-started/quickstart-tutorial.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart-tutorial",permalink:"/Botomy/docs/getting-started/quickstart-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Install",permalink:"/Botomy/docs/getting-started/install"},next:{title:"How to Play",permalink:"/Botomy/docs/gameplay/how-to-play"}},a={},c=[{value:"How It Works",id:"how-it-works",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Making Your First Bot",id:"making-your-first-bot",level:2},{value:"Basic Movement",id:"basic-movement",level:3},{value:"Combat",id:"combat",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"quickstart-tutorial",children:"Quickstart Tutorial"}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(n.p,{children:"Botomy uses a client-server architecture:"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Game Client\n    participant Bot Server\n\n    loop Every Frame\n        Game Client->>Bot Server: POST / (level_data)\n        Note right of Bot Server: Process game state<br/>Decide next moves\n        Bot Server--\x3e>Game Client: Return moves array\n        Note left of Game Client: Execute moves\n    end"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The game (client) sends level data to your bot server via POST requests"}),"\n",(0,i.jsx)(n.li,{children:"Your server processes the data and returns a list of moves"}),"\n",(0,i.jsx)(n.li,{children:"The game executes those moves for your character"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Download a starter project:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/botomy/botomy-node-starter",children:"TypeScript Starter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/botomy/botomy-python-starter",children:"Python Starter"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Start your server (follow the repo's README instructions). It should be running on port 3000."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"In Botomy:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Press ",(0,i.jsx)(n.strong,{children:"RUN"})]}),"\n",(0,i.jsx)(n.li,{children:'You should see your character say "Hello Botomy!"'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Run Button",src:t(3944).A+"",width:"738",height:"378"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"making-your-first-bot",children:"Making Your First Bot"}),"\n",(0,i.jsx)(n.p,{children:"Let's start with a simple task - collecting a coin!"}),"\n",(0,i.jsx)(n.h3,{id:"basic-movement",children:"Basic Movement"}),"\n",(0,i.jsx)(n.p,{children:"The first thing you need to do is collect a coin. Let's modify the code to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Find a coin"}),"\n",(0,i.jsx)(n.li,{children:"Move to the coin"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// TypeScript example modifying src/play.ts\nfunction play(levelData: LevelData) {\n  const moves = [];\n\n  // Find a coin\n  const coin = levelData.items.find(item => item.type === "coin");\n\n  if (coin) {\n    // Move to the coin\'s position\n    moves.push({ move_to: { x: coin.position.x, y: coin.position.y } });\n  }\n\n  return moves;\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Python example modifying play.py\ndef play(level_data: dict) -> list:\n    moves = []\n\n    # Find the coins\n    coins = [item for item in level_data["items"] if item["type"] == "coin"]\n    if coins:\n        coin = coins[0]\n        # Move to the coin\'s position\n        moves.append({"move_to": {"x": coin["position"]["x"], "y": coin["position"]["y"]}})\n\n    return moves\n'})}),"\n",(0,i.jsx)(n.p,{children:"When you run this code:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Your bot will find the first coin in the list"}),"\n",(0,i.jsx)(n.li,{children:"Move towards its position"}),"\n",(0,i.jsx)(n.li,{children:"Collect it automatically when close enough"}),"\n",(0,i.jsx)(n.li,{children:"Gain XP points from the collection"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"API RESPONSE"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[\n  {\n    "move_to": {\n      "x": <x_coord>,\n      "y": <y_coord>,\n    }\n  },\n]\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Every object in the game has a position making it easy to move towards whatever you like."})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:'The coordinate system is "raster coordinate system" where the origin is at the top left and the y-axis increases downwards.'})}),"\n",(0,i.jsx)(n.h3,{id:"combat",children:"Combat"}),"\n",(0,i.jsx)(n.p,{children:"Attacking enemy monsters and players is essential to levelling up. Let's modify the code to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Move to an enemy"}),"\n",(0,i.jsx)(n.li,{children:"Attack"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// TypeScript example modifying src/play.ts\nfunction play(levelData: LevelData) {\n  const moves = [];\n\n  // Find an enemy\n  if (levelData.enemies && levelData.enemies.length > 0) {\n    const enemy = levelData.enemies[0];\n\n    // Move to the enemy\'s position\n    moves.push({ move_to: { x: enemy.position.x, y: enemy.position.y } });\n\n    // Attack\n    moves.push("attack");\n  }\n\n  return moves;\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Python example modifying play.py\ndef play(level_data: dict) -> list:\n    moves = []\n\n    # Find the enemies\n    enemies = level_data["enemies"]\n    if enemies:\n        enemy = enemies[0]\n        # Move to the enemy\'s position\n        moves.append({"move_to": {"x": enemy["position"]["x"], "y": enemy["position"]["y"]}})\n\n        # Attack\n        moves.append("attack")\n\n    return moves\n'})}),"\n",(0,i.jsx)(n.p,{children:"You will see your character attacking while moving towards the enemy."}),"\n",(0,i.jsx)(n.p,{children:"API RESPONSE"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[\n  {\n    "move_to": {\n      "x": <x_coord>,\n      "y": <y_coord>,\n    }\n  },\n  "attack"\n]\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:['Try other combat mechanics like "shield", and "dash". See more here ',(0,i.jsx)(n.a,{href:"/docs/gameplay/how-to-play",children:"How to Play"})]})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Your API is called multiple times per frame. This means your bot can make multiple moves per frame. The game will execute them in real time."})}),"\n",(0,i.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Review ",(0,i.jsx)(n.a,{href:"/docs/gameplay/how-to-play",children:"How to Play"})," for all available moves"]}),"\n",(0,i.jsxs)(n.li,{children:["Join our ",(0,i.jsx)(n.a,{href:"https://discord.gg/TTdkaA63zX",children:"Discord"})," for help and to share your bots!"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);