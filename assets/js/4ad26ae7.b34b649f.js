"use strict";(self.webpackChunkbotomy_wiki=self.webpackChunkbotomy_wiki||[]).push([[9079],{1470:(e,n,t)=>{t.d(n,{A:()=>_});var a=t(6540),i=t(4164),s=t(3104),r=t(6347),o=t(205),l=t(7485),c=t(1682),d=t(679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const i=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function y(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=p(e),[r,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,u]=m({queryString:t,groupId:i}),[y,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,d.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:i}),v=(()=>{const e=c??y;return h({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{v&&l(v)}),[v]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var g=t(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function x(e){let{className:n,block:t,selectedValue:a,selectValue:r,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),i=o[t].value;i!==a&&(c(n),r(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...s,className:(0,i.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:i}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function j(e){const n=y(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",v.tabList),children:[(0,f.jsx)(x,{...n,...e}),(0,f.jsx)(b,{...n,...e})]})}function _(e){const n=(0,g.A)();return(0,f.jsx)(j,{...e,children:u(e.children)},String(n))}},4946:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=t(4848),i=t(8453),s=t(1470),r=t(9365);const o={sidebar_position:1},l="Code Essentials",c={id:"guides/code-essentials",title:"Code Essentials",description:"Essential coding concepts and utilities to help you build better bots.",source:"@site/docs/guides/code-essentials.mdx",sourceDirName:"guides",slug:"/guides/code-essentials",permalink:"/Botomy/docs/guides/code-essentials",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Stats",permalink:"/Botomy/docs/level-data/stats/"},next:{title:"Troubleshooting",permalink:"/Botomy/docs/troubleshooting/"}},d={},u=[{value:"Distance Calculation",id:"distance-calculation",level:2},{value:"Finding Nearest Object",id:"finding-nearest-object",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Directional Movement",id:"directional-movement",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"code-essentials",children:"Code Essentials"}),"\n",(0,a.jsx)(n.p,{children:"Essential coding concepts and utilities to help you build better bots."}),"\n",(0,a.jsx)(n.h2,{id:"distance-calculation",children:"Distance Calculation"}),"\n",(0,a.jsx)(n.p,{children:"Finding the distance between game objects is the foundation for any Botomy player. You must be able to determine whether something is nearby and of interest, or far away and (maybe) not interesting."}),"\n",(0,a.jsx)(n.p,{children:"Using basic 2D coordinate math, you can easily calculate the distance between two objects."}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(r.A,{value:"js",label:"JavaScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function getDistance(point1, point2) {\n  // a^2 + b^2 = c^2\n  const dx = point2.x - point1.x;\n  const dy = point2.y - point1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n// Example usage\nconst playerPos = levelData.own_player.position;\nconst enemyPos = levelData.enemies[0].position;\nconst distance = getDistance(playerPos, enemyPos);\n"})})}),(0,a.jsx)(r.A,{value:"ts",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface Position {\n  x: number;\n  y: number;\n}\n\nfunction getDistance(point1: Position, point2: Position): number {\n  // a^2 + b^2 = c^2\n  const dx = point2.x - point1.x;\n  const dy = point2.y - point1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n// Example usage\nconst playerPos = levelData.own_player.position;\nconst enemyPos = levelData.enemies[0].position;\nconst distance = getDistance(playerPos, enemyPos);\n"})})}),(0,a.jsxs)(r.A,{value:"py",label:"Python",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import math\n\ndef get_distance(point1: dict, point2: dict) -> float:\n    # a^2 + b^2 = c^2\n    dx = point2["x"] - point1["x"]\n    dy = point2["y"] - point1["y"]\n    return math.sqrt(dx * dx + dy * dy)\n\n# Example usage\nplayer_pos = level_data["own_player"]["position"]\nenemy_pos = level_data["enemies"][0]["position"]\ndistance = get_distance(player_pos, enemy_pos)\n'})}),(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Worried about performance? Square root operations are expensive. Do you really need the exact distance in normal units?"})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"finding-nearest-object",children:"Finding Nearest Object"}),"\n",(0,a.jsx)(n.p,{children:"Using the first item off a list is easy, but it does not guarantee it's the closest thing to your character. Create a simple helper function to find the nearest object based on your position."}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(r.A,{value:"js",label:"JavaScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function findNearest(sourcePos, targets) {\n  return targets.reduce((nearest, current) => {\n    const currentDist = getDistance(sourcePos, current.position);\n    const nearestDist = nearest\n      ? getDistance(sourcePos, nearest.position)\n      : Infinity;\n    return currentDist < nearestDist ? current : nearest;\n  }, null);\n}\n\n// Example usage\nconst playerPos = levelData.own_player.position;\nconst nearestItem = findNearest(playerPos, levelData.items);\n"})})}),(0,a.jsx)(r.A,{value:"ts",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface GameObject {\n  position: Position;\n}\n\nfunction findNearest<T extends GameObject>(\n  sourcePos: Position,\n  targets: T[]\n): T | null {\n  return targets.reduce((nearest, current) => {\n    const currentDist = getDistance(sourcePos, current.position);\n    const nearestDist = nearest\n      ? getDistance(sourcePos, nearest.position)\n      : Infinity;\n    return currentDist < nearestDist ? current : nearest;\n  }, null as T | null);\n}\n\n// Example usage\nconst playerPos = levelData.own_player.position;\nconst nearestItem = findNearest(playerPos, levelData.items);\n"})})}),(0,a.jsx)(r.A,{value:"py",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def find_nearest(source_pos: dict, targets: list) -> dict:\n    if not targets:\n        return None\n    return min(targets,\n              key=lambda x: get_distance(source_pos, x["position"]))\n\n# Example usage\nplayer_pos = level_data["own_player"]["position"]\ncoins = [item for item in level_data["items"] if item["type"] == "coin"]\nnearest_coin = find_nearest(player_pos, coins)\n'})})})]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Build on this to detect things like - is there more than one enemy surrounding me?"})}),"\n",(0,a.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,a.jsx)(n.p,{children:"The game gives you large lists of objects grouped at high levels (i.e. items, enemies, players, hazards, collisions)."}),"\n",(0,a.jsx)(n.p,{children:"It's essential to be able to filter the object lists to find specific objects of interest (and ignore the rest)."}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(r.A,{value:"js",label:"JavaScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Find all coins\nconst coins = levelData.items.filter((item) => item.type === "coin");\n\n// Find all health potions\nconst potions = levelData.items.filter((item) => item.type === "big_potion");\n\n// Find alive players with less than 50% health\nconst weakPlayers = levelData.players.filter(\n  (player) => player.health > 0 && player.health / player.max_health < 0.5\n);\n\n// Find enemies within attack range (125 units)\nconst playerPos = levelData.own_player.position;\nconst nearbyEnemies = levelData.enemies.filter(\n  (enemy) => getDistance(playerPos, enemy.position) < 125\n);\n'})})}),(0,a.jsx)(r.A,{value:"ts",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Find all coins\nconst coins = levelData.items.filter((item) => item.type === "coin");\n\n// Find all health potions\nconst potions = levelData.items.filter((item) => item.type === "big_potion");\n\n// Find alive players with less than 50% health\nconst weakPlayers = levelData.players.filter(\n  (player) => player.health > 0 && player.health / player.max_health < 0.5\n);\n\n// Find enemies within attack range (125 units)\nconst playerPos = levelData.own_player.position;\nconst nearbyEnemies = levelData.enemies.filter(\n  (enemy) => getDistance(playerPos, enemy.position) < 125\n);\n'})})}),(0,a.jsx)(r.A,{value:"py",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Find all coins\ncoins = [item for item in level_data["items"] if item["type"] == "coin"]\n\n# Find all health potions\npotions = [item for item in level_data["items"] if item["type"] == "big_potion"]\n\n# Find alive players with less than 50% health\nweak_players = [\n    player for player in level_data["players"]\n    if player["health"] > 0 and player["health"] / player["max_health"] < 0.5\n]\n\n# Find enemies within attack range (125 units)\nplayer_pos = level_data["own_player"]["position"]\nnearby_enemies = [\n    enemy for enemy in level_data["enemies"]\n    if get_distance(player_pos, enemy["position"]) < 125\n]\n'})})})]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.p,{children:["Combine filtering with ",(0,a.jsx)(n.code,{children:"findNearest()"})," to locate the closest relevant target:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const nearestPotion = findNearest(\n  levelData.own_player.position,\n  levelData.items.filter((item) => item.type === "big_potion")\n);\n'})})]}),"\n",(0,a.jsx)(n.h2,{id:"directional-movement",children:"Directional Movement"}),"\n",(0,a.jsx)(n.p,{children:"The game provides basic navigation around obstacles. If you tell your bot to move towards a position, it will navigate around obstacles to get there (assuming it's possible to reach)."}),"\n",(0,a.jsx)(n.p,{children:"Moving in a specific direction vs towards a target is sometimes helpful (e.g. running away from a bomb)."}),"\n",(0,a.jsx)(n.p,{children:"Calculate a new x,y coordinate to move towards based on your position and a target."}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(r.A,{value:"js",label:"JavaScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function moveAway(current, target, magnitude = 400) {\n  const dx = current.x - target.x;\n  const dy = current.y - target.y;\n  const angle = Math.atan2(dy, dx);\n\n  return {\n    move_to: {\n      x: current.x + Math.cos(angle) * magnitude,\n      y: current.y + Math.sin(angle) * magnitude,\n    },\n  };\n}\n\n// Example usage - running away from a hazard\nconst playerPos = levelData.own_player.position;\nconst hazard = levelData.hazards[0];\nif (hazard) {\n  moves.push(moveAway(playerPos, hazard.position));\n}\n"})})}),(0,a.jsx)(r.A,{value:"ts",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface Position {\n  x: number;\n  y: number;\n}\n\ninterface Move {\n  move_to: Position;\n}\n\nfunction moveAway(current: Point, target: Point, magnitude = 400): Move {\n  const dx = current.x - target.x;\n  const dy = current.y - target.y;\n  const angle = Math.atan2(dy, dx);\n\n  return {\n    move_to: {\n      x: current.x + Math.cos(angle) * magnitude,\n      y: current.y + Math.sin(angle) * magnitude,\n    },\n  };\n}\n\n// Example usage - running away from a hazard\nconst playerPos = levelData.own_player.position;\nconst hazard = levelData.hazards[0];\nif (hazard) {\n  moves.push(moveAway(playerPos, hazard.position));\n}\n"})})}),(0,a.jsx)(r.A,{value:"py",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import math\n\ndef move_away(current: dict, target: dict, magnitude: float = 400) -> dict:\n    dx = current["x"] - target["x"]\n    dy = current["y"] - target["y"]\n    angle = math.atan2(dy, dx)\n\n    return {\n        "move_to": {\n            "x": current["x"] + math.cos(angle) * magnitude,\n            "y": current["y"] + math.sin(angle) * magnitude\n        }\n    }\n\n# Example usage - avoiding a hazard\nplayer_pos = level_data["own_player"]["position"]\nhazard_pos = level_data["hazards"][0]["position"]\nmoves.append(move_away(player_pos, hazard_pos))\n'})})})]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"moveAway()"})," to escape from dangerous enemies or hazards"]}),"\n",(0,a.jsx)(n.li,{children:"Combine with distance checks and states to switch between pursuing and fleeing"}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var a=t(4164);const i={tabItem:"tabItem_Ymn6"};var s=t(4848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,r),hidden:t,children:n})}}}]);